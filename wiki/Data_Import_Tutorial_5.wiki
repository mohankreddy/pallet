#summary One-sentence summary of this page.

= Introduction =
This tutorial is in the continuation of Data_Import_Tutorial 1,2,3,4. This is the last 
tutorial which completes the Data Import Section of the Mallet.
 * Feature Count Pipe
 * Feature Value String 2 Feature Vector
 * Feature Vector Sequence 2 Feature Vectors
 * Filter Empty Feature Vector
 * Instance List Trim Features By Count
 * Noop
 * Pipe
 * PrintInput
 * Print Token Sequence Features
 * Save Data In Source
 * Selective SGML 2 Token Sequence
 * Simple Tagger Sentence 2 String Tokenization
 * Token 2 Feature Vector
 * Token Sequence 2 Token Instances
 * Token Sequence Parse Feature String
 * Augmentable Feature Vector Add Conjunction



= Feature Count Pipe =
This pipe is used to prune the features which have low count.It is used in order to save the memory which could have been occupied by low count features.This class supports a simpler method that makes two passes over the data : one to collect statistics and create an augumented "stop list",and secondly to actually create instances.

==Implementation==

 * 1) FeatureCountPipe(): This is a simple constructor with no parameters which creates the instance of FeatureCountPipe.

 * 2)FeatureCountPipe(Alphabet datalphabet,Alphabet targetAlphabet): User can supply data alphabet and target alphabet explicity .

==Methods==

 * 1)void addPrunedWordsToStoplist(SimpleTokenizer tokenizer, int minimumCount): Add all pruned words to the internal stoplist of a SimpleTokenizer.

 * 2)Alphabet getPrunedAlphabet(int minimumcount): Return a new Alphabet that contains only features at or above the specified limit

 * 3)void writeCommonWords(java.io.File commonfile,int totalwords): List the most common words ,for addition to a stop file.

 * 4)void writePrunedWords(java.io.File prunedfile,int minimumcount): Write a list of features that do not occur at or above the specified cutoff to the pruned file,one per file.

 * 5)Instance pipe(Instance instance): Method used to process the data.

==Sample Code==